<?xml version="1.0" standalone="no"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
 "http://oasis.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY Taught "Taught">]>
<article>
    <title>&Taught;</title>
    <subtitle>tools for course maintenance and grading</subtitle>
  <sect1>
    <title>Introduction and Overview</title>

    <para>Welcome to the &Taught; suite of course-management software.</para>

    <para>&Taught; is a suite of modules and programs designed to help
teachers with record-keeping tasks.  &Taught; can help you
maintain a class roster, enter grades for assignments, and
do the calculation of final grades.  &Taught; can also
automatically generate nicely formatted attendance sheets
and gradebook pages, printed with the names of your
students.   A number of utility programs are supplied; if
you are a Perl programmer, you can also use the &Taught;
modules to write your own programs or extensions.</para>

    <para>&Taught; is very unfancy.  It operates via the command line,
and it stores all of your data in plain-text files.  This is
by choice.  First, I prefer command-line interaction to GUI
interaction; second, one of my main purposes in writing &Taught;
was to automate course management while still preserving the
ability to edit rosters and grade files by hand when I
wanted to.  If you edit your &Taught; data files by hand, you
just have to be aware of a few conventions that &Taught; uses
(like starting comment lines with the &ldquo;#&rdquo; character), so
that after you've edited a roster or grade sheet by hand,
&Taught; will still be able to process it.</para>

    <para>In short, if you want to reduce many of your course
management to a few simple interactive commands, combined
when appropriate with manual editing of lists and grades,
&Taught; may suit you very well.</para>

    <sect2>
      <title>System and software requirements</title> <para>I have developed
&Taught; on Linux machines exclusively (one Pentium, one Sparc).  It uses
<application>Perl</application> and optionally <application>TeX</application>.
I've tried not to hard-code it to the *nix world, but I haven't tested it on
any other platform.</para>

    </sect2>

    <sect2>
      <title>
A couple of &Taught; examples
</title>
      <para>To give you a sense of what &Taught; does, here's a typical
&Taught; command line for the <command>gradelog</command> program, which is
used for interactive entry of grades:  </para>

<literallayout><userinput>
gradelog -t fall1999 -c seminar -s aa
</userinput></literallayout>

      <para>The options in this example mean: section aa of the Seminar
course, Fall 1999 term.  <command>gradelog</command> will respond with a list
of all the assignments for that course, and let you choose
which one(s) you want to record grades for.  Then it will go
through the class roster and let you input each student's
grade.</para>

      <para>Here's another example: we're going to create a LaTeX
attendance sheet, for the same section as the above:</para>

<literallayout><userinput>
makegrid -t fall1999 -c seminar -s aa
</userinput></literallayout>

      <para>The result of this will be a .tex file and a .dvi file, in
the subdirectory of section aa (see below for more on
&Taught;'s directory structure), with the names of all the
students in the section and a row of boxes next to each
name, suitable for marking attendance.  (There are options
to makegrid which allow you to control the number and size
of the boxes.)</para>
    </sect2>

</sect1>
<sect1>
<title>The &Taught; directory structure</title>

<sect2>
<title>Overview</title>

<para>&Taught; keeps track of your class rosters and other data by
means of a directory structure which parallels the
real-life structure of semesters, courses, and sections.
The top-level directory, called &tilde;/teaching by default,
contains a subdirectory for every term.  Each term directory
contains one or more course subdirectories.  Finally,
each course subdirectory contains one or more section
subdirectories:</para>

      <programlisting>

&tilde;/teaching              # master directory
   fall1999/            # Fall 1999 term
     seminar            # Seminar
        aa              # Section aa
        bb              # Section bb
     welles             # Course on Orson Welles
        aa              # only has one section
   spring2000/          # next term....
     ....</programlisting>

<para>
In addition to this tree of term-courses-sections, &Taught;
maintains some utility directories.  Each
term/course/section directory (as well as &tilde;/teaching itself)
has a subdirectory called &ldquo;docs&rdquo;.  You may put anything you
like in these &ldquo;docs&rdquo; areas; &Taught; never examines or changes
them.  Each course directory also has a subdirectory called
&ldquo;lists&rdquo;, which contains symbolic links to any DVI files you
have created for attendance sheets and gradebook pages.  The
top-level directory, &tilde;/teaching, has a &ldquo;bin&rdquo; subdirectory,
which contains the &Taught; utility programs.
</para>

<para>
&Taught; also has naming and placement conventions for the
files it creates.  Every section directory has a file called
&ldquo;roster&rdquo; (the class list).  When you log the grades for an
assignment, those grades are saved in a file called
&ldquo;gradesheet&rdquo;, also in the appropriate section directory.
When &Taught; does the calculation of final grades for the
semester, it saves them in a file called &ldquo;report&rdquo;.  Every
course directory has a file called &ldquo;cfile&rdquo;, which contains
the names and percentage values of all the assignments for
the course.  It is by merging this file with the class
rosters that &Taught; keeps track of grading.
</para>

<para>
When you use the &Taught; utilities, you don't have to worry
about the directory structure.  In most cases -- for instance,
if you want to log grades for a particular assignment -- you
just indicate with command-line options which term, course, and
section you want to address.  Still, it's useful to know about
the directory structure in case you want to edit anything by
hand.  Of course, if you create or change a &Taught; data file
by hand, make sure you use the right name when you save the
file.  
</para>
</sect2>

<sect2>
<title>Extended tree view of the &Taught; directory structure</title>

<para>Here's a more detailed tree view of the &Taught; directory
structure.  In this example, you're teaching one Seminar
section, and two sections of a history survey course:</para>
<programlisting>

                             &tilde;/teaching/
                                  |
  -------------------------------------------------------------------  ...
  |      |                        |                                 |
docs/   bin/                 fall1999/                         spring2000/ 
                                  |                                ...
             -----------------------------------------------
             |       |            |                        |       
           docs/  lists/       seminar/                histsurv/ 
                                  |                        |    
                            ------------                ------- 
                            |     |    |                |     |
                          docs/ cfile  AA/              AA/   BB/
                                       |                |     |
                                    ---------------    ...   ...
                                    |      |      |
                                  docs/ roster gradesheet

</programlisting>

</sect2>

<sect2>
<title>Naming conventions for &Taught; directories and files</title>

<para>&Taught; automatically names the files it deals with, and it
automatically organizes the directories in the correct
relation to each other.  However, you have to tell &Taught;
what you want your directories to be called -- which really
means you have to tell &Taught; what semesters you want
directories for, and what courses and sections.</para>

<para>Semester (or &ldquo;term&rdquo;) names have to follow a certain pattern:
they have to consist of a string of letters followed by a
string of numbers.  Examples of valid term names:</para>

<programlisting>
   fall1999
   fall99
   f99
</programlisting>

<para>Invalid term names would include:</para>

<programlisting>
  1st99
  1999fall
  thisfall
</programlisting>

<para>
Course names should be one word, generally a shortened
version of the full course name.  Choose a name that will
uniquely and clearly identify the course.  Here are some
examples from my &tilde;/teaching directories:</para>

<programlisting>
  Senior Seminar              ->  seminar
  Electronic Age in America   ->  eage
  Alternative Video           ->  altern
</programlisting>

<para>Of course, you can reuse the same course name in different
semesters.  
</para>

<para>Section names are generally straightforward: if it's section
AA, call it AA (or aa).  If your school has weird
conventions for naming sections, just make sure you use
one-word, unique (per course) section names, so that &Taught;
will be able to create and find the section directories
easily.</para>  
</sect2>
</sect1>

<sect1>
<title>Using &Taught;</title>

<sect2>
<title>First-time setup</title>

<para>The best way to get started with &Taught; is to run the
tsetup program.  In fact, you will probably run this program at
the beginning of every semester.  When you run it the very first
time, it creates your top-level teaching directory.</para>

<para>So, assuming you've installed the &Taught; modules and programs
correctly, run tsetup.</para><para></para>

</sect2>

<sect2>
<title>Beginning of each semester</title>

<para>At the beginning of the semester, you generally need to:</para>

      <orderedlist>
    <listitem>
       <para>create the new term directory, with appropriate course and
section directories, using the tsetup tool;</para>
    </listitem>
    <listitem>
 <para>create the rosters for all the sections you are teaching;</para></listitem>
    <listitem><para>
 optionally create LaTeX attendance sheets and gradebook
pages, using the prepterm tool.</para></listitem></orderedlist>

<sect3>
<title>
Creating the new term directory
</title>

<para>Run tsetup and tell it about the new semester.  tsetup will take you through
an interactive exchange, where you will tell it which term you want to modify,
what courses you are teaching, how many sections of each there are, and
what the assignments (requirements) are for each course.</para>

<para>In general during tsetup, you can enter a blank line to move back to the
previous level.  For example, if you are teaching two sections of a given
course, then after you've entered the two sections names, enter a blank
line and tsetup will stop asking you for sections.</para>

<para>tsetup will create the course description files for each course you are
teaching.  In order to save time, tsetup will detect whether you have ever
taught courses with the same names as the ones you're creating.  If you have,
tsetup will give you the chance to duplicate the assignments from any of those
earlier incarnations of the course.  This saves you from having to type &ldquo;Exam
1... Exam 2...&rdquo; every time you offer a given course.</para>

</sect3>

<sect3>
<title>
Creating the rosters
</title>

<para>Each line of a class roster, according to the &Taught; format, contains a
student's name, some blank space, and a number (actually a number-and-dashes
string, such as a social security number).  It is very easy to create
such rosters by hand, or by cutting-and-pasting from an existing computerized
class list.  You need to give each student a number; if you don't have real
ID or SS numbers, just put &ldquo;123&rdquo; or something for each student:</para>

<programlisting>
   Black, David A.      012345
   Person, John Q.      012-34-5678
</programlisting>


<para>You can also use the utility a2roster, which takes a file containing
one student per line (with or without numbers) and creates the roster
for the section you specify, supplying dummy ID numbers as needed:</para>

<literallayout><userinput>
a2roster -t term -c course -s section filename
</userinput></literallayout>

<para>So all you really need is a plain-text list of your students' names, and
you can create the roster automatically.</para>
</sect3>

<sect3>
<title>Creating LaTeX attendance sheets and gradebook pages</title>

<para>The makegrid and makelist programs automatically create LaTeX attendance
sheets (grids with your students' names on them) and gradebook pages
(suitable for recording comments and a grade for one assignment).  The
easiest way to make these sheets is with the prepterm utility:</para>

<literallayout><userinput>prepterm -t term </userinput></literallayout>

<para>Assuming prepterm finds the relevant roster files, it will create the
appropriate LaTeX files: one overall grid for each section, and one gradebook
page per assignment per section.  It will also put symbolic links to all of the
resulting .dvi files in a directory called &ldquo;lists&rdquo;, which is a subdirectory of
the term directory.</para>

<para>Then, you need to create the roster file.</para>
</sect3>
</sect2>

<sect2>
<title>During the semester</title>

<para>The main things you are likely to do during the semester are:</para>

<orderedlist>
<listitem><para>make manual changes to the roster and
gradesheet</para></listitem> <listitem><para>log grades for
assignments</para></listitem></orderedlist>

      <sect3>
    <title>Making changes to the roster and gradesheet</title>

    <para>The easiest way to do this is by hand, in a text editor.  You can
delete or comment out students who have dropped the course, and add ones who
have signed in.</para>

    <para>You should keep these two files in sync.  (See more on this
below, under &ldquo;Logging grades&rdquo;.)</para>

      </sect3>

   <sect3 id="logging">
    <title>Logging grades</title>

<para>The program <command>gradelog</command> lets you enter grade
interactively.  You start it up like this:</para>

<literallayout><userinput>
gradelog -t term -c course -s section
</userinput></literallayout>

<para><command>gradelog</command> will show you a list of all the requirements
for the course, and ask you which one you want to enter grades for.  Then
<command>gradelog</command> shows you each student's name and waits for you to
enter a grade for that student.</para>

<para>If you want to enter grades for only some of the students (for example,
with an assignment that is submitted in shifts during the semester), you can
just hit &lt;ENTER&gt; to enter a blank grade for any student.</para>

<para>If a grade already exists for a particular student for that assignment,
that existing grade will be shown along with the student's name:</para>

<literallayout>
<prompt>
Black, David A. [C+]
</prompt>
</literallayout>

<para>At that point, you can either hit &lt;ENTER&gt; to accept the existing
grade, or enter a new one.</para>

<para>When <command>gradelog</command> starts up, it checks two lists of
students: the list in the section roster, and the list in the section
gradesheet, if that gradesheet already exists.  If there are
discrepancies&mdash;that is, if there are students in the roster who are not in
the gradesheet, or vice versa&mdash;<command>gradelog</command> will warn you.
You must fix those discrepancies by hand.  The student list
<command>gradelog</command> actually uses is the union of those two lists.
Basically, this means that if you delete someone from the roster, you should
delete them from the gradesheet too, so that they won't resurface during the
grading process.</para>

</sect3>
</sect2>
<sect2>
<title>End of the semester</title>

<sect3>
<title>Calculate the grades.</title>

<para>To calculate grades, the basic command is:</para>

<literallayout><userinput>
dogrades -t term -c course -s section
</userinput></literallayout>

<para>If you just supply a term, then all courses and sections will be
done.</para>

<para>If you just supply and term and a course, then all sections of that
course will be done.</para>

<para><command>dogrades</command> reads everything in the
<filename>gradesheet</filename> file for the given section, calculates the
grades, and prints a list of names and final semester grades in a file called
<filename>report</filename>, in the appropriate section subdirectory.</para>
</sect3>
</sect2>
</sect1>
</article>





